package com.lorenzi.logistic.domain.model;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import com.lorenzi.logistic.domain.exception.DomainException;

@Entity
public class Delivery {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	
	@ManyToOne
	private Client client;
	
	
	@Embedded
	private Recipient recipient;
	
	@OneToMany(mappedBy = "delivery", cascade = CascadeType.ALL)
	private List<Occurrence> occurrences = new ArrayList<>();
	
	
	private BigDecimal tax;
	

	@Enumerated(EnumType.STRING)
	private DeliveryStatus status;
	

	private OffsetDateTime deliveryDate;
	

	private OffsetDateTime completedDate;
	
	
	
	public Occurrence addOccurrence(String detail) {
		Occurrence occurrence = new Occurrence();
		occurrence.setDetail(detail);
		occurrence.setRegistrationDate(OffsetDateTime.now());
		occurrence.setDelivery(this);
		
	
		this.getOccurrences().add(occurrence);
		
		return occurrence;
	}
	
	
	public List<Occurrence> getOccurrences() {
		return occurrences;
	}


	public void setOccurrences(List<Occurrence> occurrences) {
		this.occurrences = occurrences;
	}


	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Client getClient() {
		return client;
	}
	public void setClient(Client client) {
		this.client = client;
	}
	public Recipient getRecipient() {
		return recipient;
	}
	public void setRecipient(Recipient recipient) {
		this.recipient = recipient;
	}
	public BigDecimal getTax() {
		return tax;
	}
	public void setTax(BigDecimal tax) {
		this.tax = tax;
	}
	public DeliveryStatus getStatus() {
		return status;
	}
	public void setStatus(DeliveryStatus status) {
		this.status = status;
	}
	public OffsetDateTime getDeliveryDate() {
		return deliveryDate;
	}
	public void setDeliveryDate(OffsetDateTime offsetDateTime) {
		this.deliveryDate = offsetDateTime;
	}
	public OffsetDateTime getCompletedDate() {
		return completedDate;
	}
	public void setCompletedDate(OffsetDateTime completedDate) {
		this.completedDate = completedDate;
	}
	@Override
	public int hashCode() {
		return Objects.hash(id);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Delivery other = (Delivery) obj;
		return Objects.equals(id, other.id);
	}


	public void complete() {
		if (!canBeComplete()) {
			throw new DomainException("The delivery cannot be completed");
		}
		
		setStatus(DeliveryStatus.COMPLETED);
		setCompletedDate(OffsetDateTime.now());
		
	}
		

	public boolean canBeComplete() {
		return DeliveryStatus.PENDING.equals(getStatus());
	}
}
